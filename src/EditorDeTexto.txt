(+ 2 3 4)
(- 2 (+ 4 5))
(setq var 10)
(var)
(setq asd 1)
(asd)
(+ asd var)
(equal a a)
(equal a b)
(< 1 2)
(< 2 1)
(> 1 2)
(> 3 1)
(list 1 2 3 4)
(list 1 var)
(atom 1 2 3)
(atom a)
(cond ( (= 1 2 ) 1) (t (* 1 2)))
( cond ( ( < asd 2 ) 1 )  (t ( - asd 1  ))  )
(defun prueba (t) (+ t t))
(defun fc (t) (* 0.55555555556 (- t 32)))
(defun fibonacci (n) (cond ( (< n 2) n) (t (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))
(defun facorial (x) ( cond ( ( < x 2 ) 1 ) ( t ( * x ( facorial ( - x 1 ) ) ) ) ) )